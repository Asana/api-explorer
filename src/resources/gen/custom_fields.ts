/// <reference path="../interfaces.ts" />

/**
 * This file is auto-generated by the `asana-api-meta` NodeJS package.
 * We try to keep the generated code pretty clean but there will be lint
 * errors that are just not worth fixing.
 */
/* tslint:disable:max-line-length */
/* tslint:disable:eofline */
var resource = <Resource>{
  "name": "custom_fields",
  "comment": "\nCustom Fields store the metadata that is used in order to add user-specified\ninformation to tasks in Asana. Be sure to reference the [Custom\nFields](/developers/documentation/getting-started/custom-fields) developer\ndocumentation for more information about how custom fields relate to various\nresources in Asana.\n\nUsers in Asana can [lock custom\nfields](/guide/help/premium/custom-fields#gl-lock-fields), which will make\nthem read-only when accessed by other users. Attempting to edit a locked\ncustom field will return HTTP error code `403 Forbidden`.\n",
  "properties": [
    {
      "name": "id",
      "type": "Id",
      "example_values": [
        "1234"
      ],
      "access": "Read-only",
      "comment": "Globally unique ID of the custom field.\n**Note: This field is under active migration to the [`gid` field](#field-gid)--please see our [blog post](/developers/documentation/getting-started/deprecations) for more information.**\n"
    },
    {
      "name": "gid",
      "type": "Gid",
      "example_values": [
        "\"1234\""
      ],
      "access": "Read-only",
      "comment": "Globally unique ID of the custom field.\n"
    },
    {
      "name": "resource_type",
      "type": "Enum",
      "access": "Read-only",
      "comment": "The resource type of this resource. The value for this resource is always `custom_field`.\n",
      "example_values": [
        "\"custom_field\""
      ],
      "values": [
        {
          "name": "custom_field",
          "comment": "A custom field resource type."
        }
      ]
    },
    {
      "name": "resource_subtype",
      "type": "Enum",
      "access": "Create-only",
      "comment": "The type of custom field. Must be one of the given values.\n",
      "example_values": [
        "\"text\"",
        "\"number\"",
        "\"enum\""
      ],
      "values": [
        {
          "name": "text",
          "comment": "A custom field of subtype `text`. Text custom fields store strings of text in Asana and have very few restrictions on content."
        },
        {
          "name": "number",
          "comment": "A custom field of subtype `number`. Number custom fields must contain only valid numbers and are constrained to a predefined precision."
        },
        {
          "name": "enum",
          "comment": "A custom field of subtype `enum`. Enum custom fields are constrained to one of a set of predefined values."
        }
      ]
    },
    {
      "name": "name",
      "type": "String",
      "example_values": [
        "'Priority'"
      ],
      "comment": "The name of the custom field.\n"
    },
    {
      "name": "description",
      "type": "String",
      "example_values": [
        "'Development team priority'"
      ],
      "comment": "[Opt In](/developers/documentation/getting-started/input-output-options). The description of the custom field.\n"
    },
    {
      "name": "type",
      "type": "String",
      "example_values": [
        "'text'",
        "'enum'",
        "'number'"
      ],
      "access": "Create-only",
      "comment": "**Deprecated: new integrations should prefer the `resource_subtype` field.**\nThe type of the custom field. Must be one of the given values.\n"
    },
    {
      "name": "enum_options",
      "type": "String",
      "example_values": [
        "[ { id: 789, gid: \"789\", name: 'Low', enabled: 'true', color: 'blue' }, ... ]"
      ],
      "access": "Read-only",
      "comment": "Only relevant for custom fields of type 'enum'. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](#enum-options).\n"
    },
    {
      "name": "precision",
      "type": "Integer",
      "example_values": [
        "2"
      ],
      "comment": "Only relevant for custom fields of type 'Number'. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.\n"
    }
  ],
  "action_classes": [
    {
      "name": "Type-specific custom field information",
      "url": "type-specific",
      "comment": "Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, `enum_options` is only relevant for the `enum` type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.\n",
      "example_keys": [
        "get-enum-custom-field-data",
        "get-text-custom-field-data",
        "get-number-custom-field-data"
      ]
    },
    {
      "name": "Get a custom field",
      "url": "get-single"
    },
    {
      "name": "Query for custom fields",
      "url": "query-metadata"
    },
    {
      "name": "Create a custom field",
      "url": "create",
      "example_keys": [
        "create-enum-custom-field",
        "create-text-custom-field",
        "create-number-custom-field"
      ]
    },
    {
      "name": "Update a custom field",
      "url": "update"
    },
    {
      "name": "Delete a custom field",
      "url": "delete"
    },
    {
      "name": "Working with custom field enum options",
      "url": "enum-options",
      "comment": "Enum options are the possible values which an enum custom field can adopt. An enum custom field must contain at least 1 enum option but no more than 50.\n\nYou can add  enum options to a custom field by using the `POST /custom_fields/custom-field-id/enum_options` endpoint.\n\n**It is not possible to remove or delete an enum option.** Instead, enum options can be disabled by updating the `enabled` field to `false ` with the `PUT /enum_options/enum_option-id` endpoint. Other attributes can be updated similarly.\n\nOn creation of an enum option, `enabled` is always set to `true`, meaning the enum option is a selectable value for the custom field. Setting `enabled=false` is equivalent to \"trashing\" the enum option in the Asana web app within the \"Edit Fields\" dialog. The enum option will no longer be selectable but, if the enum option value was previously set within a task, the task will retain the value.\n\nEnum options are an ordered list and by default new enum options are inserted at the end. Ordering in relation to existing enum options can be specified on creation by using `insert_before` or `insert_after` to reference an existing enum option. Only one of `insert_before` and `insert_after` can be provided when creating a new enum option.\n\nAn enum options list can be reordered with the `POST /custom_fields/custom-field-id/enum_options/insert` endpoint.\n"
    },
    {
      "name": "Add a new enum option",
      "url": "add-option"
    },
    {
      "name": "Update an existing enum option",
      "url": "update-option"
    },
    {
      "name": "Reorder enum options",
      "url": "reorder-options"
    }
  ],
  "actions": [
    {
      "name": "create",
      "class": "create",
      "method": "POST",
      "path": "/custom_fields",
      "params": [
        {
          "name": "workspace",
          "type": "Gid",
          "example_values": [
            "\"1331\""
          ],
          "comment": "The workspace to create a custom field in.",
          "required": true
        },
        {
          "name": "resource_subtype",
          "type": "String",
          "comment": "The type of the custom field. Must be one of the given values.",
          "example_values": [
            "\"text\"",
            "\"enum\"",
            "\"number\""
          ],
          "required": true
        },
        {
          "name": "type",
          "type": "String",
          "comment": "**Deprecated: New integrations should prefer the `resource_subtype` parameter.**",
          "example_values": [
            "\"text\"",
            "\"enum\"",
            "\"number\""
          ]
        },
        {
          "name": "name",
          "type": "String",
          "comment": "The name of the custom field.",
          "example_values": [
            "'Priority'"
          ],
          "required": true
        },
        {
          "name": "description",
          "type": "String",
          "comment": "The description of the custom field.",
          "example_values": [
            "'Development team priority'"
          ],
          "required": false
        },
        {
          "name": "precision",
          "type": "Integer",
          "comment": "The number of decimal places for the numerical values. Required if the custom field is of type 'number'.",
          "example_values": [
            "2"
          ]
        },
        {
          "name": "enum_options",
          "type": "String",
          "comment": "The discrete values the custom field can assume. Required if the custom field is of type 'enum'.",
          "example_values": [
            "[ { name: 'Low', color: 'blue' }, { name: 'Medium', color: 'yellow' }, { name: 'High', color: 'red' } ]"
          ]
        }
      ],
      "comment": "Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.\n\nA custom field's `name` must be unique within a workspace and not conflict with names of existing task properties such as 'Due Date' or 'Assignee'. A custom field's `type` must be one of  'text', 'enum', or 'number'.\n\nReturns the full record of the newly created custom field.\n"
    },
    {
      "name": "findById",
      "class": "get-single",
      "method": "GET",
      "path": "/custom_fields/%s",
      "params": [
        {
          "name": "custom_field",
          "type": "Gid",
          "example_values": [
            "\"124578\""
          ],
          "comment": "Globally unique identifier for the custom field.\n",
          "required": true
        }
      ],
      "comment": "Returns the complete definition of a custom field's metadata.\n"
    },
    {
      "name": "findByWorkspace",
      "class": "query-metadata",
      "method": "GET",
      "path": "/workspaces/%s/custom_fields",
      "params": [
        {
          "name": "workspace",
          "type": "Gid",
          "example_values": [
            "\"1331\""
          ],
          "comment": "The workspace or organization to find custom field definitions in.",
          "required": true
        }
      ],
      "collection": true,
      "comment": "Returns a list of the compact representation of all of the custom fields in a workspace.\n"
    },
    {
      "name": "update",
      "class": "update",
      "method": "PUT",
      "path": "/custom_fields/%s",
      "params": [
        {
          "name": "custom_field",
          "type": "Gid",
          "example_values": [
            "\"124578\""
          ],
          "comment": "Globally unique identifier for the custom field.\n",
          "required": true
        }
      ],
      "comment": "A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged\n\nWhen using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.\n\nAn enum custom field's `enum_options` cannot be updated with this endpoint. Instead see \"Work With Enum Options\" for information on how to update `enum_options`.\n\nLocked custom fields can only be updated by the user who locked the field.\n\nReturns the complete updated custom field record.\n"
    },
    {
      "name": "delete",
      "class": "delete",
      "method": "DELETE",
      "path": "/custom_fields/%s",
      "params": [
        {
          "name": "custom_field",
          "type": "Gid",
          "example_values": [
            "\"124578\""
          ],
          "comment": "Globally unique identifier for the custom field.\n",
          "required": true
        }
      ],
      "comment": "A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.\n\nLocked custom fields can only be deleted by the user who locked the field.\n\nReturns an empty data record.\n"
    },
    {
      "name": "createEnumOption",
      "class": "add-option",
      "method": "POST",
      "path": "/custom_fields/%s/enum_options",
      "params": [
        {
          "name": "custom_field",
          "type": "Gid",
          "example_values": [
            "\"124578\""
          ],
          "comment": "Globally unique identifier for the custom field.\n",
          "required": true
        },
        {
          "name": "name",
          "type": "String",
          "comment": "The name of the enum option.",
          "example_values": [
            "'High'",
            "'Low'"
          ],
          "required": true
        },
        {
          "name": "color",
          "type": "String",
          "comment": "The color of the enum option. Defaults to 'none'.",
          "example_values": [
            "'red'",
            "'blue'"
          ]
        },
        {
          "name": "insert_before",
          "type": "Gid",
          "example_values": [
            "\"12345\""
          ],
          "comment": "An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option."
        },
        {
          "name": "insert_after",
          "type": "Gid",
          "example_values": [
            "\"12345\""
          ],
          "comment": "An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option."
        }
      ],
      "comment": "Creates an enum option and adds it to this custom field's list of enum options. A custom field can have at most 50 enum options (including disabled options). By default new enum options are inserted at the end of a custom field's list.\n\nLocked custom fields can only have enum options added by the user who locked the field.\n\nReturns the full record of the newly created enum option.\n"
    },
    {
      "name": "updateEnumOption",
      "class": "update-option",
      "method": "PUT",
      "path": "/enum_options/%s",
      "params": [
        {
          "name": "enum_option",
          "type": "Gid",
          "example_values": [
            "\"97285\""
          ],
          "comment": "Globally unique identifier for the enum option.\n",
          "required": true
        },
        {
          "name": "name",
          "type": "String",
          "comment": "The name of the enum option.",
          "example_values": [
            "'High'",
            "'Low'"
          ],
          "required": true
        },
        {
          "name": "color",
          "type": "String",
          "comment": "The color of the enum option. Defaults to 'none'.",
          "example_values": [
            "'red'",
            "'blue'"
          ]
        },
        {
          "name": "enabled",
          "type": "Boolean",
          "example_values": [
            "false"
          ],
          "comment": "Whether or not the enum option is a selectable value for the custom field."
        }
      ],
      "comment": "Updates an existing enum option. Enum custom fields require at least one enabled enum option.\n\nLocked custom fields can only be updated by the user who locked the field.\n\nReturns the full record of the updated enum option.\n"
    },
    {
      "name": "insertEnumOption",
      "class": "reorder-options",
      "method": "POST",
      "path": "/custom_fields/%s/enum_options/insert",
      "params": [
        {
          "name": "custom_field",
          "type": "Gid",
          "example_values": [
            "\"124578\""
          ],
          "comment": "Globally unique identifier for the custom field.\n",
          "required": true
        },
        {
          "name": "enum_option",
          "type": "Gid",
          "example_values": [
            "\"97285\""
          ],
          "comment": "The ID of the enum option to relocate.",
          "required": true
        },
        {
          "name": "name",
          "type": "String",
          "comment": "The name of the enum option.",
          "example_values": [
            "'High'",
            "'Low'"
          ],
          "required": true
        },
        {
          "name": "color",
          "type": "String",
          "comment": "The color of the enum option. Defaults to 'none'.",
          "example_values": [
            "'red'",
            "'blue'"
          ]
        },
        {
          "name": "before_enum_option",
          "type": "Gid",
          "example_values": [
            "\"12345\""
          ],
          "comment": "An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option."
        },
        {
          "name": "after_enum_option",
          "type": "Gid",
          "example_values": [
            "\"12345\""
          ],
          "comment": "An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option."
        }
      ],
      "comment": "Moves a particular enum option to be either before or after another specified enum option in the custom field.\n\nLocked custom fields can only be reordered by the user who locked the field.\n"
    }
  ]
};
export = resource;
